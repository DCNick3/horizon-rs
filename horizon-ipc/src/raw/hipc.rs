/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type u32_ = super::c_types::c_uint;
pub type u16_ = super::c_types::c_ushort;
pub type u8_ = super::c_types::c_uchar;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct HipcHeader {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u16>,
}
impl HipcHeader {
    #[inline]
    pub fn type_(&self) -> u16_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u16) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u16_) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn num_in_pointers(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_num_in_pointers(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_in_map_aliases(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_num_in_map_aliases(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_out_map_aliases(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_num_out_map_aliases(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_inout_map_aliases(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_num_inout_map_aliases(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_data_words(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_num_data_words(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn out_pointer_mode(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(42usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_out_pointer_mode(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(42usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(46usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(46usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn recv_list_offset(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(52usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_recv_list_offset(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(52usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn has_special_header(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_special_header(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u16_,
        num_in_pointers: u32_,
        num_in_map_aliases: u32_,
        num_out_map_aliases: u32_,
        num_inout_map_aliases: u32_,
        num_data_words: u32_,
        out_pointer_mode: u32_,
        padding: u32_,
        recv_list_offset: u32_,
        has_special_header: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 8usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u16 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let num_in_pointers: u32 = unsafe { ::core::mem::transmute(num_in_pointers) };
            num_in_pointers as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let num_in_map_aliases: u32 = unsafe { ::core::mem::transmute(num_in_map_aliases) };
            num_in_map_aliases as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let num_out_map_aliases: u32 = unsafe { ::core::mem::transmute(num_out_map_aliases) };
            num_out_map_aliases as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let num_inout_map_aliases: u32 =
                unsafe { ::core::mem::transmute(num_inout_map_aliases) };
            num_inout_map_aliases as u64
        });
        __bindgen_bitfield_unit.set(32usize, 10u8, {
            let num_data_words: u32 = unsafe { ::core::mem::transmute(num_data_words) };
            num_data_words as u64
        });
        __bindgen_bitfield_unit.set(42usize, 4u8, {
            let out_pointer_mode: u32 = unsafe { ::core::mem::transmute(out_pointer_mode) };
            out_pointer_mode as u64
        });
        __bindgen_bitfield_unit.set(46usize, 6u8, {
            let padding: u32 = unsafe { ::core::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit.set(52usize, 11u8, {
            let recv_list_offset: u32 = unsafe { ::core::mem::transmute(recv_list_offset) };
            recv_list_offset as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let has_special_header: u32 = unsafe { ::core::mem::transmute(has_special_header) };
            has_special_header as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct HipcSpecialHeader {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
impl HipcSpecialHeader {
    #[inline]
    pub fn send_pid(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_send_pid(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn num_copy_handles(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_num_copy_handles(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_move_handles(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_num_move_handles(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        send_pid: u32_,
        num_copy_handles: u32_,
        num_move_handles: u32_,
        padding: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let send_pid: u32 = unsafe { ::core::mem::transmute(send_pid) };
            send_pid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 4u8, {
            let num_copy_handles: u32 = unsafe { ::core::mem::transmute(num_copy_handles) };
            num_copy_handles as u64
        });
        __bindgen_bitfield_unit.set(5usize, 4u8, {
            let num_move_handles: u32 = unsafe { ::core::mem::transmute(num_move_handles) };
            num_move_handles as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let padding: u32 = unsafe { ::core::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HipcInPointerBufferDescriptor {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub address_low: u32_,
}
impl HipcInPointerBufferDescriptor {
    #[inline]
    pub fn index(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_index(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn address_high(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_address_high(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn address_mid(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_address_mid(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        index: u32_,
        address_high: u32_,
        address_mid: u32_,
        size: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let index: u32 = unsafe { ::core::mem::transmute(index) };
            index as u64
        });
        __bindgen_bitfield_unit.set(6usize, 6u8, {
            let address_high: u32 = unsafe { ::core::mem::transmute(address_high) };
            address_high as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let address_mid: u32 = unsafe { ::core::mem::transmute(address_mid) };
            address_mid as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let size: u32 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HipcMapAliasBufferDescriptor {
    pub size_low: u32_,
    pub address_low: u32_,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
impl HipcMapAliasBufferDescriptor {
    #[inline]
    pub fn mode(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mode(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn address_high(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_address_high(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn size_high(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_size_high(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn address_mid(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_address_mid(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mode: u32_,
        address_high: u32_,
        size_high: u32_,
        address_mid: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let mode: u32 = unsafe { ::core::mem::transmute(mode) };
            mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 22u8, {
            let address_high: u32 = unsafe { ::core::mem::transmute(address_high) };
            address_high as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let size_high: u32 = unsafe { ::core::mem::transmute(size_high) };
            size_high as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let address_mid: u32 = unsafe { ::core::mem::transmute(address_mid) };
            address_mid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HipcOutPointerBufferDescriptor {
    pub address_low: u32_,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
impl HipcOutPointerBufferDescriptor {
    #[inline]
    pub fn address_high(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_address_high(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> u32_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u32_) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        address_high: u32_,
        size: u32_,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let address_high: u32 = unsafe { ::core::mem::transmute(address_high) };
            address_high as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let size: u32 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit
    }
}
