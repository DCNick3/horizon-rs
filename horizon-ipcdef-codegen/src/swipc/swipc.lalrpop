use std::str::FromStr;
use std::sync::Arc;
use arcstr::ArcStr;
use lalrpop_util::ParseError;
use codespan_reporting::diagnostic::{Diagnostic, Label};
use crate::swipc::model::{
    NominalType, IntType, Struct, Enum, Bitflags, Interface,
    Command, Value, HandleTransferType, BufferTransferMode,
    StructMarker, BufferExtraAttrs, IpcFileItem, TypeAlias,
    IpcFile, StructField, EnumArm, BitflagsArm,
};
use crate::swipc::diagnostics::Span;

grammar(file_id: usize);

extern {
    type Error = Vec<Diagnostic<usize>>;
}

Num: u64 = {
    <s:r"[0-9]+"> => u64::from_str(s).unwrap(),
    <s:r"0x[0-9a-fA-F]+"> => u64::from_str_radix(&s[2..], 16).unwrap()
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Ident: ArcStr = <s:r"[a-zA-Z_][a-zA-Z\d_\-:]*"> => ArcStr::from(s);

LocalIdent: ArcStr = <s:Ident> => {
    assert!(!s.contains(':'), "Local identifier can't have ':' in it");
    assert!(!s.contains('-'), "Local identifier can't have '-' in it");
    ArcStr::from(s)
};

IntType: IntType = {
    "u8" => IntType::U8,
    "u16" => IntType::U16,
    "u32" => IntType::U32,
    "u64" => IntType::U64,

    "i8" => IntType::I8,
    "i16" => IntType::I16,
    "i32" => IntType::I32,
    "i64" => IntType::I64,

    "s8" => IntType::I8,
    "s16" => IntType::I16,
    "s32" => IntType::I32,
    "s64" => IntType::I64,
};

StructMarker: StructMarker = {
    "sf::LargeData" => StructMarker::LargeData,
    "sf::PrefersMapAliasTransferMode" => StructMarker::PrefersTransferMode(BufferTransferMode::MapAlias),
    "sf::PrefersPointerTransferMode" => StructMarker::PrefersTransferMode(BufferTransferMode::Pointer),
    "sf::PrefersAutoSelectTransferMode" => StructMarker::PrefersTransferMode(BufferTransferMode::AutoSelect),
};

StructField: StructField =
    <l:@L>
    Docs
    <ty:NominalType> <name:LocalIdent>
    <r:@R> ";"
    => StructField {
        name,
        ty,
        location: Span::new(file_id, l, r),
    };

pub StructDef: Struct =
    <l:@L>
    Docs
    "struct" <name:Ident> <markers:(":" <Comma<StructMarker>>)?> "{"
        <fields:(<StructField>)*>
        // Allow docs here because.... Reasons (need for test readability, lol)
        Docs
    "}" ";"
    <r:@R> =>? Struct::try_new(
                name,
                fields,
                markers.unwrap_or_default(),
                Span::new(file_id, l, r)
            ).map_err(|error| ParseError::User {
                     error: error
                         .into_iter()
                         .map(|e| e.with_labels(vec![Label::primary(file_id, l..r)]))
                         .collect(),
                 });

EnumArm: EnumArm =
    <l:@L>
    Docs
    <name:LocalIdent> "=" <value:Num>
    <r:@R> => EnumArm {
        name,
        value,
        location: Span::new(file_id, l, r),
    };

pub EnumDef: Enum =
    <l:@L>
    Docs
    "enum" <name:Ident> ":" <base_type:IntType> "{"
        <arms:Comma<EnumArm>>
    "}" ";"
    <r:@R> => Enum {
        name,
        base_type,
        arms,
        location: Span::new(file_id, l, r)
    };

BitflagsArm: BitflagsArm =
    <l:@L>
    Docs
    <name:LocalIdent> "=" <value:Num>
    <r:@R> => BitflagsArm {
        name,
        value,
        location: Span::new(file_id, l, r),
    };

pub BitflagsDef: Bitflags =
    <l:@L>
    Docs
    "bitflags" <name:Ident> ":" <base_type:IntType> "{"
        <arms:Comma<BitflagsArm>>
    "}" ";"
    <r:@R> => Bitflags {
        name,
        base_type,
        arms,
        location: Span::new(file_id, l, r)
    };

/// Nominal type is (kind of) a type name
/// It does not allow using structures (and other compound types) directly, only by its name
/// This distinction is added because rust does not allow unnamed structures, but swipc syntax (kind of) does
NominalType: NominalType = {
    <ty:IntType> => NominalType::Int(ty),
    "b8" => NominalType::Bool,
    "bool" => NominalType::Bool,
    "f32" => NominalType::F32,
    "sf::Bytes" "<" <size:Num> ">" => NominalType::Bytes { size, alignment: 1 },
    "sf::Bytes" "<" <size:Num> "," <alignment:Num> ">" => NominalType::Bytes { size, alignment },
    "sf::Unknown" <size:("<" <Num> ">")?> => NominalType::Unknown { size },
    <l:@L> <i:Ident> <r:@R> => NominalType::TypeName {
        name: i,
        reference_location: Span::new(file_id, l, r),
    },
};

pub TypeAlias: TypeAlias =
    <l:@L>
    "type" <name:Ident> "=" <ty:NominalType> ";"
    <r:@R> => TypeAlias {
        name,
        referenced_type: ty,
        location: Span::new(file_id, l, r)
    };

Value: Value = {
    "sf::ClientProcessId" => Value::ClientProcessId,

    "sf::CopyHandle" => Value::InHandle(HandleTransferType::Copy),
    "sf::MoveHandle" => Value::InHandle(HandleTransferType::Move),
    "sf::OutCopyHandle" => Value::OutHandle(HandleTransferType::Copy),
    "sf::OutMoveHandle" => Value::OutHandle(HandleTransferType::Move),

    "sf::InBuffer" => Value::InBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::None),
    "sf::InMapAliasBuffer" => Value::InBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::None),
    "sf::InPointerBuffer" => Value::InBuffer(BufferTransferMode::Pointer, BufferExtraAttrs::None),
    "sf::InAutoSelectBuffer" => Value::InBuffer(BufferTransferMode::AutoSelect, BufferExtraAttrs::None),
    "sf::InNonSecureBuffer" => Value::InBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::AllowNonSecure),
    "sf::InNonDeviceBuffer" => Value::InBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::AllowNonDevice),

    "sf::InNonSecureAutoSelectBuffer" => Value::InBuffer(BufferTransferMode::AutoSelect, BufferExtraAttrs::AllowNonSecure),

    "sf::Out" "<" "sf::SharedPointer" "<" <l:@L> "sf::IUnknown" <r:@R> ">" ">" => Value::OutObject(None, Span::new(file_id, l, r)),
    "sf::Out" "<" "sf::SharedPointer" "<" <l:@L> <iface:Ident> <r:@R> ">" ">" => Value::OutObject(Some(iface), Span::new(file_id, l, r)),
    "sf::Out" "<" <t:NominalType> ">" => Value::Out(t),

    "sf::OutBuffer" => Value::OutBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::None),
    "sf::OutMapAliasBuffer" => Value::OutBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::None),
    "sf::OutPointerBuffer" => Value::OutBuffer(BufferTransferMode::Pointer, BufferExtraAttrs::None),
    "sf::OutAutoSelectBuffer" => Value::OutBuffer(BufferTransferMode::AutoSelect, BufferExtraAttrs::None),
    "sf::OutNonSecureBuffer" => Value::OutBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::AllowNonSecure),
    "sf::OutNonDeviceBuffer" => Value::OutBuffer(BufferTransferMode::MapAlias, BufferExtraAttrs::AllowNonDevice),

    "sf::OutNonSecureAutoSelectBuffer" => Value::OutBuffer(BufferTransferMode::AutoSelect, BufferExtraAttrs::AllowNonSecure),

    "sf::InArray" "<" <t:NominalType> ">" => Value::InArray(t, None),
    "sf::InMapAliasArray" "<" <t:NominalType> ">" => Value::InArray(t, Some(BufferTransferMode::MapAlias)),
    "sf::InPointerArray" "<" <t:NominalType> ">" => Value::InArray(t, Some(BufferTransferMode::Pointer)),
    "sf::InAutoSelectArray" "<" <t:NominalType> ">" => Value::InArray(t, Some(BufferTransferMode::AutoSelect)),

    "sf::OutArray" "<" <t:NominalType> ">" => Value::OutArray(t, None),
    "sf::OutMapAliasArray" "<" <t:NominalType> ">" => Value::OutArray(t, Some(BufferTransferMode::MapAlias)),
    "sf::OutPointerArray" "<" <t:NominalType> ">" => Value::OutArray(t, Some(BufferTransferMode::Pointer)),
    "sf::OutAutoSelectArray" "<" <t:NominalType> ">" => Value::OutArray(t, Some(BufferTransferMode::AutoSelect)),

    "sf::SharedPointer" "<" <l:@L> <iface:Ident> <r:@R> ">" => Value::InObject(iface, Span::new(file_id, l, r)),
    <t:NominalType> => Value::In(t),
};

InputSpec: (Option<ArcStr>, Arc<Value>) = {
    <v:Value> => (None, Arc::new(v)),
    <v:Value> <n:LocalIdent> => (Some(n), Arc::new(v)),
};

Docs: () = {
    (r"///[^\S\r\n]*([^\r\n]*)")*
};

Version: () =
    <major:Num> "."
    <minor:Num> "."
    <micro:Num> => ();

VersionSpec: () = {
    Version,
    Version "+",
    Version "-" Version,
};

CommandDecorator: () = {
    "@" "version" "(" VersionSpec ")",
    "@" "undocumented",
};

Command: Command =
    Docs
    CommandDecorator*
    <l:@L>
    "[" <id:Num> "]" <name:LocalIdent>
        "(" <arguments:Comma<InputSpec>> ")"
    <r:@R>
    => Command {
        id: id.try_into().unwrap(),
        name,
        arguments,
        location: Span::new(file_id, l, r),
    };

pub InterfaceDef: Interface =
    <l:@L>
    "interface" <name:Ident> <sm_names:("is" <Comma<Ident>>)?> "{"
        <commands:(<Command> ";")*>
    "}"
    <r:@R> => Interface {
        name,
        sm_names: sm_names.unwrap_or_default(),
        commands,
        location: Span::new(file_id, l, r),
    };

pub Item: IpcFileItem = {
    <t:TypeAlias> => IpcFileItem::TypeAlias(Arc::new(t)),
    <s:StructDef> => IpcFileItem::StructDef(Arc::new(s)),
    <e:EnumDef> => IpcFileItem::EnumDef(Arc::new(e)),
    <b:BitflagsDef> => IpcFileItem::BitflagsDef(Arc::new(b)),
    <i:InterfaceDef> => IpcFileItem::InterfaceDef(Arc::new(i)),
};

pub IpcFile: IpcFile = <i:(Item)*> =>?
 IpcFile::try_new(i)
 .map_err(|error| {
    ParseError::User { error }
 });